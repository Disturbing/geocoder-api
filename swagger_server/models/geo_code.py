# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.b_box import BBox  # noqa: F401,E501
from swagger_server import util


class GeoCode(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, accuracy: str=None, address: str=None, bbox: BBox=None, city: str=None, confidence: int=None, country: str=None, county: str=None, housenumber: str=None, lat: float=None, lon: float=None, neighborhood: str=None, ok: bool=None, place: str=None, postal: str=None, postal_town: str=None, quality: str=None, state: str=None, status: str=None, street: str=None, sublocality: str=None, subpremise: str=None):  # noqa: E501
        """GeoCode - a model defined in Swagger

        :param accuracy: The accuracy of this GeoCode.  # noqa: E501
        :type accuracy: str
        :param address: The address of this GeoCode.  # noqa: E501
        :type address: str
        :param bbox: The bbox of this GeoCode.  # noqa: E501
        :type bbox: BBox
        :param city: The city of this GeoCode.  # noqa: E501
        :type city: str
        :param confidence: The confidence of this GeoCode.  # noqa: E501
        :type confidence: int
        :param country: The country of this GeoCode.  # noqa: E501
        :type country: str
        :param county: The county of this GeoCode.  # noqa: E501
        :type county: str
        :param housenumber: The housenumber of this GeoCode.  # noqa: E501
        :type housenumber: str
        :param lat: The lat of this GeoCode.  # noqa: E501
        :type lat: float
        :param lon: The lon of this GeoCode.  # noqa: E501
        :type lon: float
        :param neighborhood: The neighborhood of this GeoCode.  # noqa: E501
        :type neighborhood: str
        :param ok: The ok of this GeoCode.  # noqa: E501
        :type ok: bool
        :param place: The place of this GeoCode.  # noqa: E501
        :type place: str
        :param postal: The postal of this GeoCode.  # noqa: E501
        :type postal: str
        :param postal_town: The postal_town of this GeoCode.  # noqa: E501
        :type postal_town: str
        :param quality: The quality of this GeoCode.  # noqa: E501
        :type quality: str
        :param state: The state of this GeoCode.  # noqa: E501
        :type state: str
        :param status: The status of this GeoCode.  # noqa: E501
        :type status: str
        :param street: The street of this GeoCode.  # noqa: E501
        :type street: str
        :param sublocality: The sublocality of this GeoCode.  # noqa: E501
        :type sublocality: str
        :param subpremise: The subpremise of this GeoCode.  # noqa: E501
        :type subpremise: str
        """
        self.swagger_types = {
            'accuracy': str,
            'address': str,
            'bbox': BBox,
            'city': str,
            'confidence': int,
            'country': str,
            'county': str,
            'housenumber': str,
            'lat': float,
            'lon': float,
            'neighborhood': str,
            'ok': bool,
            'place': str,
            'postal': str,
            'postal_town': str,
            'quality': str,
            'state': str,
            'status': str,
            'street': str,
            'sublocality': str,
            'subpremise': str
        }

        self.attribute_map = {
            'accuracy': 'accuracy',
            'address': 'address',
            'bbox': 'bbox',
            'city': 'city',
            'confidence': 'confidence',
            'country': 'country',
            'county': 'county',
            'housenumber': 'housenumber',
            'lat': 'lat',
            'lon': 'lon',
            'neighborhood': 'neighborhood',
            'ok': 'ok',
            'place': 'place',
            'postal': 'postal',
            'postal_town': 'postal_town',
            'quality': 'quality',
            'state': 'state',
            'status': 'status',
            'street': 'street',
            'sublocality': 'sublocality',
            'subpremise': 'subpremise'
        }

        self._accuracy = accuracy
        self._address = address
        self._bbox = bbox
        self._city = city
        self._confidence = confidence
        self._country = country
        self._county = county
        self._housenumber = housenumber
        self._lat = lat
        self._lon = lon
        self._neighborhood = neighborhood
        self._ok = ok
        self._place = place
        self._postal = postal
        self._postal_town = postal_town
        self._quality = quality
        self._state = state
        self._status = status
        self._street = street
        self._sublocality = sublocality
        self._subpremise = subpremise

    @classmethod
    def from_dict(cls, dikt) -> 'GeoCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GeoCode of this GeoCode.  # noqa: E501
        :rtype: GeoCode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy(self) -> str:
        """Gets the accuracy of this GeoCode.


        :return: The accuracy of this GeoCode.
        :rtype: str
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy: str):
        """Sets the accuracy of this GeoCode.


        :param accuracy: The accuracy of this GeoCode.
        :type accuracy: str
        """

        self._accuracy = accuracy

    @property
    def address(self) -> str:
        """Gets the address of this GeoCode.


        :return: The address of this GeoCode.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this GeoCode.


        :param address: The address of this GeoCode.
        :type address: str
        """

        self._address = address

    @property
    def bbox(self) -> BBox:
        """Gets the bbox of this GeoCode.


        :return: The bbox of this GeoCode.
        :rtype: BBox
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox: BBox):
        """Sets the bbox of this GeoCode.


        :param bbox: The bbox of this GeoCode.
        :type bbox: BBox
        """

        self._bbox = bbox

    @property
    def city(self) -> str:
        """Gets the city of this GeoCode.


        :return: The city of this GeoCode.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this GeoCode.


        :param city: The city of this GeoCode.
        :type city: str
        """

        self._city = city

    @property
    def confidence(self) -> int:
        """Gets the confidence of this GeoCode.


        :return: The confidence of this GeoCode.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: int):
        """Sets the confidence of this GeoCode.


        :param confidence: The confidence of this GeoCode.
        :type confidence: int
        """

        self._confidence = confidence

    @property
    def country(self) -> str:
        """Gets the country of this GeoCode.


        :return: The country of this GeoCode.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this GeoCode.


        :param country: The country of this GeoCode.
        :type country: str
        """

        self._country = country

    @property
    def county(self) -> str:
        """Gets the county of this GeoCode.


        :return: The county of this GeoCode.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county: str):
        """Sets the county of this GeoCode.


        :param county: The county of this GeoCode.
        :type county: str
        """

        self._county = county

    @property
    def housenumber(self) -> str:
        """Gets the housenumber of this GeoCode.


        :return: The housenumber of this GeoCode.
        :rtype: str
        """
        return self._housenumber

    @housenumber.setter
    def housenumber(self, housenumber: str):
        """Sets the housenumber of this GeoCode.


        :param housenumber: The housenumber of this GeoCode.
        :type housenumber: str
        """

        self._housenumber = housenumber

    @property
    def lat(self) -> float:
        """Gets the lat of this GeoCode.


        :return: The lat of this GeoCode.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this GeoCode.


        :param lat: The lat of this GeoCode.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self) -> float:
        """Gets the lon of this GeoCode.


        :return: The lon of this GeoCode.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon: float):
        """Sets the lon of this GeoCode.


        :param lon: The lon of this GeoCode.
        :type lon: float
        """

        self._lon = lon

    @property
    def neighborhood(self) -> str:
        """Gets the neighborhood of this GeoCode.


        :return: The neighborhood of this GeoCode.
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood: str):
        """Sets the neighborhood of this GeoCode.


        :param neighborhood: The neighborhood of this GeoCode.
        :type neighborhood: str
        """

        self._neighborhood = neighborhood

    @property
    def ok(self) -> bool:
        """Gets the ok of this GeoCode.


        :return: The ok of this GeoCode.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok: bool):
        """Sets the ok of this GeoCode.


        :param ok: The ok of this GeoCode.
        :type ok: bool
        """

        self._ok = ok

    @property
    def place(self) -> str:
        """Gets the place of this GeoCode.


        :return: The place of this GeoCode.
        :rtype: str
        """
        return self._place

    @place.setter
    def place(self, place: str):
        """Sets the place of this GeoCode.


        :param place: The place of this GeoCode.
        :type place: str
        """

        self._place = place

    @property
    def postal(self) -> str:
        """Gets the postal of this GeoCode.


        :return: The postal of this GeoCode.
        :rtype: str
        """
        return self._postal

    @postal.setter
    def postal(self, postal: str):
        """Sets the postal of this GeoCode.


        :param postal: The postal of this GeoCode.
        :type postal: str
        """

        self._postal = postal

    @property
    def postal_town(self) -> str:
        """Gets the postal_town of this GeoCode.


        :return: The postal_town of this GeoCode.
        :rtype: str
        """
        return self._postal_town

    @postal_town.setter
    def postal_town(self, postal_town: str):
        """Sets the postal_town of this GeoCode.


        :param postal_town: The postal_town of this GeoCode.
        :type postal_town: str
        """

        self._postal_town = postal_town

    @property
    def quality(self) -> str:
        """Gets the quality of this GeoCode.


        :return: The quality of this GeoCode.
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality: str):
        """Sets the quality of this GeoCode.


        :param quality: The quality of this GeoCode.
        :type quality: str
        """

        self._quality = quality

    @property
    def state(self) -> str:
        """Gets the state of this GeoCode.


        :return: The state of this GeoCode.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this GeoCode.


        :param state: The state of this GeoCode.
        :type state: str
        """

        self._state = state

    @property
    def status(self) -> str:
        """Gets the status of this GeoCode.


        :return: The status of this GeoCode.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this GeoCode.


        :param status: The status of this GeoCode.
        :type status: str
        """

        self._status = status

    @property
    def street(self) -> str:
        """Gets the street of this GeoCode.


        :return: The street of this GeoCode.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street: str):
        """Sets the street of this GeoCode.


        :param street: The street of this GeoCode.
        :type street: str
        """

        self._street = street

    @property
    def sublocality(self) -> str:
        """Gets the sublocality of this GeoCode.


        :return: The sublocality of this GeoCode.
        :rtype: str
        """
        return self._sublocality

    @sublocality.setter
    def sublocality(self, sublocality: str):
        """Sets the sublocality of this GeoCode.


        :param sublocality: The sublocality of this GeoCode.
        :type sublocality: str
        """

        self._sublocality = sublocality

    @property
    def subpremise(self) -> str:
        """Gets the subpremise of this GeoCode.


        :return: The subpremise of this GeoCode.
        :rtype: str
        """
        return self._subpremise

    @subpremise.setter
    def subpremise(self, subpremise: str):
        """Sets the subpremise of this GeoCode.


        :param subpremise: The subpremise of this GeoCode.
        :type subpremise: str
        """

        self._subpremise = subpremise
